root                                  /var/www/dev/magento2/pub;
index                                 index.html index.htm index.php;
charset                               utf-8;

    location / {

        if ($request_method = 'OPTIONS') {
            include                       /etc/nginx/conf.d/snippet/header/cors.conf;
            add_header                    Content-Type 'text/plain; charset=utf-8' always;
            add_header                    Content-Length 0 always;

            return 204;
        }

        if ($request_filename ~* \.(bmp|css|eot|gif|html?|ico|jpe?g|js(on)?|pdf|php|png|svg|ttf|txt|woff2?)$) {
            break;
        }

     #   try_files                         $uri $uri/ /index.php?$query_string;
        try_files		            	  $uri $uri/ /index.php$is_args$args;
    }

    location /. {
        return 404;
    }

    location @handler {
        rewrite / /index.php;
    }

    location /static/ {
            #
            # Uncomment the following line in production mode
            #
            #expires max;

            #
            # Remove signature of the static files that is used to overcome the browser cache
            #
            location ~ ^/static/version {
            rewrite					^/static/(version\d*/)?(.*)$ /static/$2 last;
            }

            location ~* \.(ico|jpg|jpeg|png|gif|svg|js|css|swf|eot|ttf|otf|woff|woff2)$ {
            add_header				Cache-Control "public";
            add_header				X-Frame-Options "SAMEORIGIN";
            expires					max;

            if (!-f $request_filename) {
                rewrite				^/static/?(.*)$ /static.php?resource=$1 last;
            }
            }

            location ~* \.(zip|gz|gzip|bz2|csv|xml)$ {
            add_header				Cache-Control "no-store";
            add_header				X-Frame-Options "SAMEORIGIN";
            expires					off;

            if (!-f $request_filename) {
                rewrite				^/static/?(.*)$ /static.php?resource=$1 last;
            }
            }

            if (!-f $request_filename) {
            rewrite					^/static/?(.*)$ /static.php?resource=$1 last;
            }
            add_header					X-Frame-Options "SAMEORIGIN";
        }


        location /media/ {
            try_files					$uri $uri/ /get.php$is_args$args;

            location ~ ^/media/theme_customization/.*\.xml {
            deny					all;
            }

            location ~* \.(ico|jpg|jpeg|png|gif|svg|js|css|swf|eot|ttf|otf|woff|woff2)$ {
            add_header				Cache-Control "public";
            add_header				X-Frame-Options "SAMEORIGIN";
            expires					max;

            try_files				$uri $uri/ /get.php$is_args$args;
            }

            location ~* \.(zip|gz|gzip|bz2|csv|xml)$ {
            add_header				Cache-Control "no-store";
            add_header				X-Frame-Options "SAMEORIGIN";
            expires					off;

            try_files				$uri $uri/ /get.php$is_args$args;
            }

            add_header					X-Frame-Options "SAMEORIGIN";
        }

        location /media/customer/ {
            deny					all;
        }

        location /media/downloadable/ {
            deny					all;
        }

        location /media/import/ {
            deny					all;
        }

    location ~ .php/ {
        rewrite ^(.*.php)/ $1 last;
    }

    location ~ .php$ {
        if (!-e $request_filename) {
        rewrite / /index.php last;
        }
        fastcgi_pass fastcgi_backend;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        # tune buffers to nginx-upstream-sent-too-big-header-while-reading-response-header-from-upstream error
        fastcgi_buffers 16 32k;
        fastcgi_buffer_size 64k;
        fastcgi_busy_buffers_size 64k;
        include /etc/nginx/fastcgi.conf;
    }
